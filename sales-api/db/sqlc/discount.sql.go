// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: discount.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createDiscount = `-- name: CreateDiscount :execresult
INSERT INTO discounts (
    qty, type, result, expired_at
) VALUES (
    ?,?,?,?
)
`

type CreateDiscountParams struct {
	Qty       int32     `json:"qty"`
	Type      string    `json:"type"`
	Result    int32     `json:"result"`
	ExpiredAt time.Time `json:"expired_at"`
}

func (q *Queries) CreateDiscount(ctx context.Context, arg CreateDiscountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createDiscount,
		arg.Qty,
		arg.Type,
		arg.Result,
		arg.ExpiredAt,
	)
}

const createProductDiscount = `-- name: CreateProductDiscount :exec
INSERT INTO product_discount (
    discount_id, product_id
) VALUES (
    ?,?
)
`

type CreateProductDiscountParams struct {
	DiscountID int32 `json:"discount_id"`
	ProductID  int32 `json:"product_id"`
}

func (q *Queries) CreateProductDiscount(ctx context.Context, arg CreateProductDiscountParams) error {
	_, err := q.db.ExecContext(ctx, createProductDiscount, arg.DiscountID, arg.ProductID)
	return err
}

const getDiscount = `-- name: GetDiscount :one
SELECT id, qty, type, result, expired_at, expired_at_format, string_format FROM discounts 
WHERE id=? LIMIT 1
`

func (q *Queries) GetDiscount(ctx context.Context, id int32) (Discount, error) {
	row := q.db.QueryRowContext(ctx, getDiscount, id)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.Qty,
		&i.Type,
		&i.Result,
		&i.ExpiredAt,
		&i.ExpiredAtFormat,
		&i.StringFormat,
	)
	return i, err
}
