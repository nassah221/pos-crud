// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: cashier.sql

package db

import (
	"context"
	"database/sql"
)

const createCashier = `-- name: CreateCashier :execresult
INSERT INTO cashiers (
  name, password
) VALUES (
  ?, ?
)
`

type CreateCashierParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

func (q *Queries) CreateCashier(ctx context.Context, arg CreateCashierParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCashier, arg.Name, arg.Password)
}

const deleteCashier = `-- name: DeleteCashier :exec
DELETE FROM cashiers
WHERE id = ?
`

func (q *Queries) DeleteCashier(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCashier, id)
	return err
}

const detailCashier = `-- name: DetailCashier :one
SELECT id, name, password, created_at, updated_at FROM cashiers
WHERE id = ? LIMIT 1
`

func (q *Queries) DetailCashier(ctx context.Context, id int32) (Cashier, error) {
	row := q.db.QueryRowContext(ctx, detailCashier, id)
	var i Cashier
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCashier = `-- name: GetCashier :one
SELECT cashiers.password, cashiers.name FROM cashiers
WHERE id = ? LIMIT 1
`

type GetCashierRow struct {
	Password string `json:"password"`
	Name     string `json:"name"`
}

func (q *Queries) GetCashier(ctx context.Context, id int32) (GetCashierRow, error) {
	row := q.db.QueryRowContext(ctx, getCashier, id)
	var i GetCashierRow
	err := row.Scan(&i.Password, &i.Name)
	return i, err
}

const listCashiers = `-- name: ListCashiers :many
SELECT id, name, password, created_at, updated_at FROM cashiers
ORDER BY id LIMIT ? OFFSET ?
`

type ListCashiersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCashiers(ctx context.Context, arg ListCashiersParams) ([]Cashier, error) {
	rows, err := q.db.QueryContext(ctx, listCashiers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cashier
	for rows.Next() {
		var i Cashier
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCashier = `-- name: UpdateCashier :exec
UPDATE cashiers SET name=?,password=?,updated_at=CURRENT_TIMESTAMP 
WHERE id = ?
`

type UpdateCashierParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateCashier(ctx context.Context, arg UpdateCashierParams) error {
	_, err := q.db.ExecContext(ctx, updateCashier, arg.Name, arg.Password, arg.ID)
	return err
}
