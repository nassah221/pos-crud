// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: order.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createOrder = `-- name: CreateOrder :execresult
INSERT INTO orders (
    cashier_id, payment_id, total_price, price_paid, total_return, receipt_id
) VALUES (
    ?,?,?,?,?,?
)
`

type CreateOrderParams struct {
	CashierID   int32  `json:"cashier_id"`
	PaymentID   int32  `json:"payment_id"`
	TotalPrice  int32  `json:"total_price"`
	PricePaid   int32  `json:"price_paid"`
	TotalReturn int32  `json:"total_return"`
	ReceiptID   string `json:"receipt_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrder,
		arg.CashierID,
		arg.PaymentID,
		arg.TotalPrice,
		arg.PricePaid,
		arg.TotalReturn,
		arg.ReceiptID,
	)
}

const createOrderDetails = `-- name: CreateOrderDetails :exec
INSERT INTO order_details (
    order_id,product_id, product_name, discount_id, qty, price, total_final_price, total_normal_price
) VALUES (
    ?,?,?,?,?,?,?,?
)
`

type CreateOrderDetailsParams struct {
	OrderID          int32         `json:"order_id"`
	ProductID        int32         `json:"product_id"`
	ProductName      string        `json:"product_name"`
	DiscountID       sql.NullInt32 `json:"discount_id"`
	Qty              int32         `json:"qty"`
	Price            int32         `json:"price"`
	TotalFinalPrice  int64         `json:"total_final_price"`
	TotalNormalPrice int64         `json:"total_normal_price"`
}

func (q *Queries) CreateOrderDetails(ctx context.Context, arg CreateOrderDetailsParams) error {
	_, err := q.db.ExecContext(ctx, createOrderDetails,
		arg.OrderID,
		arg.ProductID,
		arg.ProductName,
		arg.DiscountID,
		arg.Qty,
		arg.Price,
		arg.TotalFinalPrice,
		arg.TotalNormalPrice,
	)
	return err
}

const getOrderDetails = `-- name: GetOrderDetails :many
select o.id as orderId, o.payment_id as paymentTypesId, o.total_price,o.price_paid,o.total_return,o.receipt_id,o.created_at,
c.id as cashiersId, c.name as cashierName,
p.id as paymentTypeId, p.name as paymentName, p.logo, p.type paymentType,
od.product_id,od.product_name,od.discount_id as discountsId,od.qty as productQty,od.price,od.total_final_price,od.total_normal_price,
d.id,d.qty as discountQty,d.type as discountType,d.result,d.expired_at,d.expired_at_format,d.string_format
from orders as o
left join cashiers as c on c.id = o.cashier_id 
left join payments as p on p.id = o.payment_id
inner join order_details as od on od.order_id = o.id
left join discounts as d on od.discount_id = d.id
where o.id=?
`

type GetOrderDetailsRow struct {
	Orderid          int32          `json:"orderid"`
	Paymenttypesid   int32          `json:"paymenttypesid"`
	TotalPrice       int32          `json:"total_price"`
	PricePaid        int32          `json:"price_paid"`
	TotalReturn      int32          `json:"total_return"`
	ReceiptID        string         `json:"receipt_id"`
	CreatedAt        time.Time      `json:"created_at"`
	Cashiersid       int32          `json:"cashiersid"`
	Cashiername      string         `json:"cashiername"`
	Paymenttypeid    int32          `json:"paymenttypeid"`
	Paymentname      string         `json:"paymentname"`
	Logo             sql.NullString `json:"logo"`
	Paymenttype      string         `json:"paymenttype"`
	ProductID        int32          `json:"product_id"`
	ProductName      string         `json:"product_name"`
	Discountsid      sql.NullInt32  `json:"discountsid"`
	Productqty       int32          `json:"productqty"`
	Price            int32          `json:"price"`
	TotalFinalPrice  int64          `json:"total_final_price"`
	TotalNormalPrice int64          `json:"total_normal_price"`
	ID               sql.NullInt32  `json:"id"`
	Discountqty      sql.NullInt32  `json:"discountqty"`
	Discounttype     sql.NullString `json:"discounttype"`
	Result           sql.NullInt32  `json:"result"`
	ExpiredAt        sql.NullTime   `json:"expired_at"`
	ExpiredAtFormat  sql.NullString `json:"expired_at_format"`
	StringFormat     sql.NullString `json:"string_format"`
}

func (q *Queries) GetOrderDetails(ctx context.Context, id int32) ([]GetOrderDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderDetails, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderDetailsRow
	for rows.Next() {
		var i GetOrderDetailsRow
		if err := rows.Scan(
			&i.Orderid,
			&i.Paymenttypesid,
			&i.TotalPrice,
			&i.PricePaid,
			&i.TotalReturn,
			&i.ReceiptID,
			&i.CreatedAt,
			&i.Cashiersid,
			&i.Cashiername,
			&i.Paymenttypeid,
			&i.Paymentname,
			&i.Logo,
			&i.Paymenttype,
			&i.ProductID,
			&i.ProductName,
			&i.Discountsid,
			&i.Productqty,
			&i.Price,
			&i.TotalFinalPrice,
			&i.TotalNormalPrice,
			&i.ID,
			&i.Discountqty,
			&i.Discounttype,
			&i.Result,
			&i.ExpiredAt,
			&i.ExpiredAtFormat,
			&i.StringFormat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllOrderDetails = `-- name: ListAllOrderDetails :many
select o.id as orderId, o.payment_id as paymentTypesId, o.total_price,o.price_paid,o.total_return,o.receipt_id,o.created_at,
c.id as cashiersId, c.name as cashierName,
p.id as paymentTypeId, p.name as paymentName, p.logo, p.type as paymentType,
od.product_id,od.product_name,od.price,od.discount_id as discountsId,od.qty as productQty,od.total_final_price,od.total_normal_price,
d.id,d.qty as discountQty,d.type as discountType,d.result,d.expired_at,d.expired_at_format,d.string_format
from orders as o
left join cashiers as c on c.id = o.cashier_id 
left join payments as p on p.id = o.payment_id
inner join order_details as od on od.order_id = o.id
left join discounts as d on od.discount_id = d.id
ORDER BY o.id LIMIT ? OFFSET ?
`

type ListAllOrderDetailsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListAllOrderDetailsRow struct {
	Orderid          int32          `json:"orderid"`
	Paymenttypesid   int32          `json:"paymenttypesid"`
	TotalPrice       int32          `json:"total_price"`
	PricePaid        int32          `json:"price_paid"`
	TotalReturn      int32          `json:"total_return"`
	ReceiptID        string         `json:"receipt_id"`
	CreatedAt        time.Time      `json:"created_at"`
	Cashiersid       int32          `json:"cashiersid"`
	Cashiername      string         `json:"cashiername"`
	Paymenttypeid    int32          `json:"paymenttypeid"`
	Paymentname      string         `json:"paymentname"`
	Logo             sql.NullString `json:"logo"`
	Paymenttype      string         `json:"paymenttype"`
	ProductID        int32          `json:"product_id"`
	ProductName      string         `json:"product_name"`
	Price            int32          `json:"price"`
	Discountsid      sql.NullInt32  `json:"discountsid"`
	Productqty       int32          `json:"productqty"`
	TotalFinalPrice  int64          `json:"total_final_price"`
	TotalNormalPrice int64          `json:"total_normal_price"`
	ID               sql.NullInt32  `json:"id"`
	Discountqty      sql.NullInt32  `json:"discountqty"`
	Discounttype     sql.NullString `json:"discounttype"`
	Result           sql.NullInt32  `json:"result"`
	ExpiredAt        sql.NullTime   `json:"expired_at"`
	ExpiredAtFormat  sql.NullString `json:"expired_at_format"`
	StringFormat     sql.NullString `json:"string_format"`
}

func (q *Queries) ListAllOrderDetails(ctx context.Context, arg ListAllOrderDetailsParams) ([]ListAllOrderDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllOrderDetails, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllOrderDetailsRow
	for rows.Next() {
		var i ListAllOrderDetailsRow
		if err := rows.Scan(
			&i.Orderid,
			&i.Paymenttypesid,
			&i.TotalPrice,
			&i.PricePaid,
			&i.TotalReturn,
			&i.ReceiptID,
			&i.CreatedAt,
			&i.Cashiersid,
			&i.Cashiername,
			&i.Paymenttypeid,
			&i.Paymentname,
			&i.Logo,
			&i.Paymenttype,
			&i.ProductID,
			&i.ProductName,
			&i.Price,
			&i.Discountsid,
			&i.Productqty,
			&i.TotalFinalPrice,
			&i.TotalNormalPrice,
			&i.ID,
			&i.Discountqty,
			&i.Discounttype,
			&i.Result,
			&i.ExpiredAt,
			&i.ExpiredAtFormat,
			&i.StringFormat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
